<?xml version="1.0" encoding="UTF-8"?>
<project name="LiveAuction" basedir="." default="war" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property environment="env" />

  <property name="src.dir" value="src/main/java" />
  <property name="src.resources" value="src/main/resources" />

  <property name="src.test.dir" value="src/test/java" />
  <property name="src.test.resources" value="src/test/resources" />

  <property name="war.dir" value="src/main/webapp" />
  <property name="war.webxml" value="${war.dir}/WEB-INF/web.xml" />

  <property name="build.base.dir" value="build" />
  <property name="build.dir" value="${build.base.dir}/classes" />
  <property name="build.test.dir" value="${build.base.dir}/test-classes" />
  <property name="build.lib.dir" value="${build.base.dir}/lib" />

   <property name="build.war.name" value="liveauction.war" />

  <!-- ================================================================== -->
  <!-- Ivy -->
  <!-- ================================================================== -->

  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
  <property name="ivy.version" value="2.3.0" />

  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>

  <target name="download-ivy" unless="offline">
    <mkdir dir="${ivy.jar.dir}"/>
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init-ivy" depends="download-ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <target name="clean-ivy">
    <ivy:cleancache />
  </target>

  <target name="resolve" depends="init-ivy">
	<ivy:resolve/>
	
	<ivy:report todir="${build.base.dir}/ivy-report" graph="true"/>

    <ivy:cachepath pathid="compile.classpath.id" conf="*"/>
    <ivy:cachepath pathid="runtime.classpath.id" conf="*"/>
    <ivy:cachepath pathid="test.classpath.id" conf="*"/>
  </target>

  <!-- ================================================================== -->
  <!-- Eclipse -->
  <!-- ================================================================== -->

  <property name="ant-eclipse.dir" location="ant-eclipse"/>

  <target name="check-ant-eclipse">
    <available property="skip-download-ant-eclipse" file="${ant-eclipse.dir}/lib/ant-eclipse-1.0-jvm1.2.jar"/>
  </target>

  <target name="download-ant-eclipse" depends="check-ant-eclipse" unless="skip-download-ant-eclipse">
    <mkdir dir="${ant-eclipse.dir}"/>
    <get dest="${ant-eclipse.dir}/ant-eclipse-1.0.bin.tar.bz2" usetimestamp="true" src="http://downloads.sourceforge.net/project/ant-eclipse/ant-eclipse/1.0/ant-eclipse-1.0.bin.tar.bz2"/>
    <untar compression="bzip2" src="${ant-eclipse.dir}/ant-eclipse-1.0.bin.tar.bz2" dest="${ant-eclipse.dir}"/>
  </target>

  <target name="init-ant-eclipse" depends="download-ant-eclipse">
    <path id="ant-eclipse.lib.path">
      <fileset dir="${ant-eclipse.dir}" includes="**/*.jar"/>
    </path>
    <taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask" classpathref="ant-eclipse.lib.path"/>
  </target>

  <target name="clean-ant-eclipse">
    <delete dir="${ant-eclipse.dir}"/>
  </target>

  <target name="eclipse" depends="init-ant-eclipse,war">
	<ivy:retrieve pattern="${build.lib.dir}/[artifact].[ext]" conf="compile,test,runtime,provided"/>
		
    <fileset dir="${build.lib.dir}" id="eclipse.jars.id">
      <include name="**" />
    </fileset>
	
    <pathconvert pathsep=";" property="eclipse.jars" refid="eclipse.jars.id"/>

    <eclipse updatealways="true">
      <project />
        <classpath>
       	  <source path="${src.dir}" />
          <source path="${src.test.dir}" />
          <library path="${eclipse.jars}" />
      	  <output path="${build.dir}" />
        </classpath>
  	 </eclipse>
  </target>

  <target name="clean-eclipse">
	<delete file=".classpath" />
	<delete file=".eclipse" />
	<delete file=".project" />
	<delete dir=".settings" />
  </target>

  <!-- ================================================================== -->
  <!-- Build -->
  <!-- ================================================================== -->

  <target name="prepare" depends="resolve">
    <mkdir dir="${build.dir}" />
  </target>

  <target name="compile" depends="prepare">
    <javac srcdir="${src.dir}" destdir="${build.dir}" encoding="utf-8" nowarn="true" debug="false" debuglevel="lines,vars,source">
      <classpath>
        <path refid="compile.classpath.id" />
      </classpath>
    </javac>
  </target>

  <target name="war" depends="compile">
    <ivy:retrieve pattern="${build.lib.dir}/[artifact].[ext]" conf="runtime"/>
	
    <delete file="${war.name}" />

    <war basedir="${war.dir}" destfile="${build.base.dir}/${build.war.name}" webxml="${war.webxml}">
      <classes dir="${build.dir}" includes="**/*.class" />
      <lib dir="${build.lib.dir}"/>
      <zipfileset dir="${src.resources}" includes="*" prefix="WEB-INF/classes"/>
    </war>
  </target>

  <target name="clean">
    <delete includeemptydirs="true" quiet="true" failonerror="false">  
        <fileset dir="${build.dir}" includes="**/*"/>  
    	<fileset dir="${build.test.dir}" includes="**/*"/> 
        <fileset dir="${build.lib.dir}" includes="**/*"/> 
        <fileset dir="${build.base.dir}" includes="**/*"/> 
    </delete>  
  </target>

  <target name="clean-everything" depends="clean,clean-ivy,clean-ant-eclipse,clean-eclipse">
    <ivy:cleancache />
  </target>

  <!-- ================================================================== -->
  <!-- Test -->
  <!-- ================================================================== -->

  <target name="prepare-test" depends="compile">
    <mkdir dir="${build.test.dir}" />
  </target>

  <target name="compile-test" depends="prepare-test">
    <javac srcdir="${src.test.dir}" destdir="${build.test.dir}" encoding="utf-8" nowarn="true" debug="false" debuglevel="lines,vars,source">
      <classpath>
		<path location="${build.dir}"/>
        <path refid="test.classpath.id" />
      </classpath>
    </javac>

	<copy todir="${build.test.dir}">
      <fileset dir="${src.test.resources}" />
	</copy>
  </target>

  <target name="test" depends="compile-test">
    <junit printsummary="yes" haltonfailure="yes" showoutput="yes">
      <classpath>
        <path location="${build.dir}"/>
        <path location="${build.test.dir}"/>
        <path refid="test.classpath.id" />
      </classpath>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${build.test.dir}">
          <include name="**/*Test*" />
        </fileset>
      </batchtest>
    </junit>
  </target>

</project>
